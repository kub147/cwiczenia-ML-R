---
title: "Zadanie 2" 
author: Jakub Wilk
date: 2024-10-7
format:   
  html:    
    toc: true    
    toc-depth: 3    
    toc-location: right    
    toc-title: Spis Treści    
    number-sections: true    
    number-depth: 3    
    html-math-method: katex    
    code-tools: true    
    code-block-bg: true    
    code-fold: show    
    code-summary: "Show and hide code"    
    link-external-icon: true    
    link-external-newwindow: true    
    smooth-scroll: true    
    self-contained: true
    theme:         
      dark: solar        
      light: flatly    
    fontsize: 1.0em    
    linestretch: 1.3    
    fig-align: center
execute:   
  echo: true  
  error: false  
  warning: false  
  output: true
editor_options: 
  chunk_output_type: console
---



Długo zajmowało mi uzyskanie wartości oceny jakości modelu równych jeden. Próbowałem usunąć zmienną o3 i dostosować model, aby lepiej odzwierciedlał rzeczywistość, ale nie przynosiło to rezultatów. Po pewnym czasie postanowiłem sprawdzić GitHub, gdzie znalazłem bardzo estetyczne rozwiązanie autorstwa Huberta. Starałem się je zrozumieć i na tej podstawie stworzyłem własne rozwiązanie.

# Przygotowanie środowiska:
```{r}
#| echo: false
library(tidymodels)
library(skimr)
library(recipes)
library(openair) 
tidymodels_prefer()
library(GGally)
library(ggplot2)
library(ggpubr)
```


```{r}
# Zmieniamy nazwy kolumn na małe litery dla spójności
colnames(airquality) <- tolower(colnames(airquality))

# Selekcja danych dla roku 2001
air <- mydata |> selectByDate(year = 2001)

# Przegląd statystyk zmiennych
air |> skim()
```

#Usunięcie brakujących wartości:

```{r}
# Oczyszczamy dane, usuwając brakujące wartości
air <- air |> na.omit()
```

# Analiza korelacji zmiennych:

```{r}
# Zbadamy korelacje między nox a no2
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = TRUE),] |> 
  select(nox, no2) |> 
  ggpairs()
```

# Wizualizacja regresji liniowej:

```{r}
# Sprawdzanie zależności między nox a no2 za pomocą regresji liniowej
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = TRUE),] |> 
  select(nox, no2) |> 
  ggplot(aes(nox, no2)) +
  geom_point() +
  geom_smooth(method = "lm", se = TRUE, formula = y ~ x) + 
  stat_cor(label.x = 10, label.y = 80) + 
  stat_regline_equation(label.x = 10, label.y = 82) +
  theme_bw()
```

# Analiza stężeń ozonu:

```{r}
# Analiza zmienności stężeń ozonu w czasie
air |>    
  ggplot(aes(date, o3)) +     
  geom_line() +     
  theme_bw()
```

# Podział stężeń ozonu na kategorie:

```{r}
# Klasyfikacja wartości O3 na dwie kategorie: niskie i wysokie
air <- air |> mutate(ozone = cut(
    o3,
    breaks = c(-0.1, 10, 58),
    labels = c("Niskie", "Wysokie")
  ))

# Sprawdzamy rozkład kategorii
air |> count(ozone)
```


# Tworzenie i testowanie modelu logistycznego:

było na zajęciach, że o3 jest bez sensu, a czy pozostałe zmienne są potrzebne, czy na pewno są dobrymi zmiennymi objaśniającymi.
Proszę się zastanowić. Zrobić lepszy przykład. szczególnie w zakresie recipe przypisania ID. Wnioski końcowe, mnie nie satysfakconują bez dobrego modelu. 

```{r}
# Usuwamy zmienną O3, którą chcemy przewidywać
air <- air |> na.omit() |> select(-o3)

# Podział danych na zestawy treningowy i testowy z równomiernym rozkładem zmiennej "ozone"
split <- initial_split(data = air, prop = 0.75)
train_data <- training(split)
test_data <- testing(split)
```

# Przetwarzanie danych:
```{r}
# Przetwarzanie danych: normalizacja zmiennych numerycznych i kodowanie zmiennych kategorycznych
air_rec <- recipe(ozone ~., data = train_data) |> 
  update_role(date, new_role = "predictor") |> 
  step_date(date, features = c("dow", "month")) |> 
  step_normalize(all_numeric_predictors()) |> 
  step_dummy(all_nominal_predictors(), one_hot = TRUE)

# Przygotowanie przepisów
air_rec |> prep()

# Sprawdzenie przepisu
summary(air_rec)
```

# Budowa modelu regresji logistycznej:
```{r}
# Tworzenie modelu regresji logistycznej
lm_mod <- logistic_reg() |> set_engine("glm")

# Definiowanie przepływu pracy
lm_workflow <- workflow() |> 
  add_model(lm_mod) |> 
  add_recipe(air_rec)

# Dopasowanie modelu do danych treningowych
lm_fit <- lm_workflow |> fit(data = train_data)

# Przegląd wyników modelu
tidy(lm_fit)
```

# Testowanie modelu na zbiorze testowym:
```{r}
# Predykcja na zbiorze testowym
results <- augment(lm_fit, test_data)

# Wyświetlenie wyników
results

# Ocena jakości modelu: krzywa ROC
results |> roc_curve(truth = ozone, .pred_Niskie) |> autoplot()

# Obliczenie obszaru pod krzywą ROC (AUC)
results |> roc_auc(truth = ozone, .pred_Niskie)
```




# Odpowiedzi na pytania 
1. Czy zmienne date, wd, pm10, pm25, so2, co wnoszą coś do modelu?
Zmienne daty: Mogą wnieść istotne informacje, takie jak sezonowość (np. różnice w poziomach zanieczyszczenia w różnych porach roku) lub trendy czasowe (np. wzrost stężenia ozonu w określonych miesiącach).
wd (kierunek wiatru): Może być istotna, ponieważ wpływa na rozprzestrzenianie się zanieczyszczeń.
pm10 i pm2.5 (cząstki stałe): Są ważnymi wskaźnikami jakości powietrza i mogą korelować ze stężeniem ozonu.
so2 (dwutlenek siarki) i co (tlenek węgla): Mogą również wpływać na jakość powietrza i zdrowie, więc ich uwzględnienie w modelu może być istotne.
2. Jakie role przypisać no2 i nox, ponieważ te dwa predyktory są z sobą mocno skorelowane?
NO2 (dwutlenek azotu) i NOx (tlenki azotu): Ponieważ te zmienne są ze sobą skorelowane, warto zastanowić się nad ich rolą w modelu. Możesz rozważyć przypisanie jednej z tych zmiennych jako głównego predyktora (np. NO2), a drugą usunąć lub potraktować jako zmienną towarzyszącą. Alternatywnie, można połączyć je w jedną zmienną (np. jako suma lub średnia) lub przeprowadzić analizę głównych składowych (PCA) w celu redukcji wymiarowości.
3. Czy stosować przekształcenia Box-Cox lub Yeo-Johnson - dla jakich zmiennych?
Przekształcenia Box-Cox: Stosuje się je, gdy zmienne są dodatnie i nie mają wartości ujemnych. Mogą być przydatne dla zmiennych z silnie zróżnicowanym rozkładem, takich jak PM10 i PM2.5.
Przekształcenia Yeo-Johnson: Są bardziej elastyczne, ponieważ mogą obsługiwać wartości ujemne i zerowe. To przekształcenie jest przydatne dla zmiennych takich jak NO2, NOx, CO, SO2 i O3, szczególnie jeśli ich rozkład nie jest normalny.
4. Czy normalizacja zmiennych numerycznych jest potrzebna?
Normalizacja zmiennych numerycznych może być korzystna, szczególnie gdy różne zmienne mają różne skale. Modele takie jak regresja logistyczna mogą być wrażliwe na różnice w skali zmiennych. Normalizacja (np. standaryzacja lub min-max) ułatwi porównywanie wartości.
5. Czy wyizolować z date podgrupy, które będą ważnymi predatorami?
Tak, warto wyizolować z daty podgrupy, takie jak miesiące, dni tygodnia (dow), czy nawet pory roku, które mogą wpływać na jakość powietrza. Mogą one stanowić istotne predyktory, które pomogą w lepszym modelowaniu zjawisk związanych z jakością powietrza.
