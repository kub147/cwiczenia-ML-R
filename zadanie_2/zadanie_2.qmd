---
title: "Zadanie 2" 
author: Jakub Wilk
date: 2024-10-14
format:   
  html:    
    toc: true    
    toc-depth: 3    
    toc-location: right    
    toc-title: Spis Treści    
    number-sections: true    
    number-depth: 3    
    embed-resources: true    
    html-math-method: katex    
    code-tools: true    
    code-block-bg: true    
    code-fold: show    
    code-summary: "Show and hide code"    
    link-external-icon: true    
    link-external-newwindow: true    
    smooth-scroll: true    
    self-contained: true
    citation: true    
    theme:         
      dark: solar        
      light: flatly    
    fontsize: 1.0em    
    linestretch: 1.3    
    fig-align: center
execute:   
  echo: true  
  error: false  
  warning: false  
  output: true
editor_options: 
  chunk_output_type: console
---

# Wprowadzenie

Cel zadania: Analiza danych dotyczących jakości powietrza z zestawu mydata dostępnego w pakiecie openair. Celem analizy jest przewidzenie, czy stężenie ozonu (O3) było wysokie, czy niskie, przy użyciu modelu klasyfikacji.

Na wstępie muszę przyznać, że duża pomoc w tym kodzie odegrało AI. Było mi bardzo trudno zrozumieć niektóre aspekty analizy, ale z jego pomocą udało mi się coś stworzyć.

# Biblioteki

Wczytujemy niezbędne biblioteki potrzebne do przetwarzania danych, wizualizacji i budowy modelu.

```{r message=FALSE, warning=FALSE}
library(tidymodels) 
library(recipes)
library(skimr) 
library(GGally) 
library(openair) 
library(ggpubr) 
library(glmnet)
tidymodels_prefer()
```

# Wczytywanie danych

Wczytujemy dane ze zbioru mydata i wybieramy dane dla roku 2001, a następnie sprawdzamy podstawowe statystyki przy pomocy funkcji skim().

```{r}
air <- mydata |> selectByDate(year = 2001) 
air |> skim()
```

Usuwamy wiersze z brakującymi wartościami w danych za pomocą funkcji na.omit().

```{r}
air <- air |> na.omit()
```

Sprawdzamy, ile obserwacji pozostało w danych po usunięciu braków.

```{r}
n <- nrow(air)
print(n)
```


# Korelacja między zmiennymi nox i no2
```{r}
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = F),] |> 
  select(nox, no2) |> 
  ggpairs()
```


# Wykres regresji liniowej
```{r}
set.seed(222)
air[sample(1:nrow(air), size = 300, replace = F),] |> 
  select(nox, no2) |> 
  ggplot(aes(nox, no2)) +
  geom_point() +
  geom_smooth(method = "lm", se = T, formula = y ~ x) + 
  stat_cor(label.x = 10, label.y = 80) + 
  stat_regline_equation(label.x = 10, label.y = 82) +
  theme_bw()
```
Wysoka korelacja ponad 80%.

# Analiza stężeń ozonu w czasie
```{r}
air |>    
  ggplot(aes(date, o3)) +     
  geom_line() +     
  theme_bw()
```

#Zakres stężeń ozonu

Sprawdzamy minimalne i maksymalne wartości zmiennej o3 w zbiorze danych.

```{r}
air |> 
  pull(o3) |> 
  range()  
```

# Klasyfikacja stężeń ozonu
Przekształcamy zmienną ilościową o3 na zmienną jakościową, tworząc dwie kategorie: "Niskie" i "Wysokie" stężenia ozonu. Granicą między nimi jest wartość 10 µg/m³.

```{r}
air <-
  air |>
  mutate(ozone = cut(
    o3,
    breaks = c(-0.1, 10, 58),
    labels = c("Niskie", "Wysokie")
  ))

```

Sprawdzamy, ile obserwacji należy do każdej z kategorii: "Niskie" i "Wysokie".

```{r}
air |> count(ozone)
```


# Budowa modelu klasyfikacji
Następnie, możemy przystąpić do budowy modelu regresji logistycznej, który przewidzi, czy stężenie ozonu jest wysokie, czy niskie, na podstawie dostępnych predyktorów.

było na zajęciach, że o3 jest bez sensu, a czy pozostałe zmienne są potrzebne, czy na pewno są dobrymi zmiennymi objaśniającymi.
Proszę się zastanowić. Zrobić lepszy przykład. szczególnie w zakresie recipe przypisania ID. Wnioski końcowe, mnie nie satysfakconują bez dobrego modelu. 

```{r}
# Ustawienie ziarna losowości
set.seed(222)

# Podział danych z równomiernym podziałem względem zmiennej 'ozone'
split <- initial_split(air, strata = ozone)
train_data <- training(split)
test_data <- testing(split)

# Budowa przepisu do przetwarzania danych
air_rec <- recipe(ozone ~ ., data = train_data) |>
  update_role(date, new_role = "ID") |>  # Ustawiamy date jako ID
  step_date(date, features = c("month", "dow")) |>  # Użyj "dow" zamiast "day_of_week"
  step_YeoJohnson(all_numeric_predictors(), -all_outcomes()) |>  # Transformacje Yeo-Johnson dla zmiennych nienormalnych
  step_dummy(all_nominal_predictors(), one_hot = TRUE) |>  # Tworzenie zmiennych fikcyjnych
  step_zv(all_predictors()) |>  # Usuwanie zmiennych o zerowej wariancji
  step_corr(all_numeric_predictors(), threshold = 0.9)  # Sprawdź korelacje

# Sprawdzenie przepisu
air_rec |> summary()
```

## Budowa modelu regresji logistycznej
```{r}
# Budowa modelu regresji logistycznej z regularizacją
lr_mod <- logistic_reg(penalty = 0.1, mixture = 1) |>  # LASSO
  set_engine("glmnet")  # Użycie glmnet, który obsługuje regularizację

# Workflow: połączenie przepisu z modelem
logi_work <- workflow() |> 
  add_model(lr_mod) |> 
  add_recipe(air_rec)

# Dopasowanie modelu do danych uczących
logi_fit <- logi_work |> 
  fit(data = train_data)

# Sprawdzenie wyników
summary(logi_fit)
```

## Ocena modelu
```{r}
# Ocena modelu na zbiorze testowym
pred_test <- augment(logi_fit, test_data) |>
  select(ozone, starts_with(".pred")) 

# Sprawdzenie struktury pred_test
glimpse(pred_test)

# Rysowanie krzywej ROC
roc_curve(pred_test, truth = ozone, .pred_Niskie) |> 
  autoplot()

# Obliczanie AUC
roc_auc(pred_test, truth = ozone, .pred_Niskie)
```

Wartość AUC równa 1 oznacza, że model jest w stanie doskonale odróżnić obie klasy, co wskazuje na jego najwyższą skuteczność. Oznacza to, że dla każdego możliwego progu klasyfikacji model prawidłowo klasyfikuje wszystkie przypadki.?


# Odpowiedzi na pytania 
1. Czy zmienne date, wd, pm10, pm25, so2, co wnoszą coś do modelu?
Zmienne daty: Mogą wnieść istotne informacje, takie jak sezonowość (np. różnice w poziomach zanieczyszczenia w różnych porach roku) lub trendy czasowe (np. wzrost stężenia ozonu w określonych miesiącach).
wd (kierunek wiatru): Może być istotna, ponieważ wpływa na rozprzestrzenianie się zanieczyszczeń.
pm10 i pm2.5 (cząstki stałe): Są ważnymi wskaźnikami jakości powietrza i mogą korelować ze stężeniem ozonu.
so2 (dwutlenek siarki) i co (tlenek węgla): Mogą również wpływać na jakość powietrza i zdrowie, więc ich uwzględnienie w modelu może być istotne.
2. Jakie role przypisać no2 i nox, ponieważ te dwa predyktory są z sobą mocno skorelowane?
NO2 (dwutlenek azotu) i NOx (tlenki azotu): Ponieważ te zmienne są ze sobą skorelowane, warto zastanowić się nad ich rolą w modelu. Możesz rozważyć przypisanie jednej z tych zmiennych jako głównego predyktora (np. NO2), a drugą usunąć lub potraktować jako zmienną towarzyszącą. Alternatywnie, można połączyć je w jedną zmienną (np. jako suma lub średnia) lub przeprowadzić analizę głównych składowych (PCA) w celu redukcji wymiarowości.
3. Czy stosować przekształcenia Box-Cox lub Yeo-Johnson - dla jakich zmiennych?
Przekształcenia Box-Cox: Stosuje się je, gdy zmienne są dodatnie i nie mają wartości ujemnych. Mogą być przydatne dla zmiennych z silnie zróżnicowanym rozkładem, takich jak PM10 i PM2.5.
Przekształcenia Yeo-Johnson: Są bardziej elastyczne, ponieważ mogą obsługiwać wartości ujemne i zerowe. To przekształcenie jest przydatne dla zmiennych takich jak NO2, NOx, CO, SO2 i O3, szczególnie jeśli ich rozkład nie jest normalny.
4. Czy normalizacja zmiennych numerycznych jest potrzebna?
Normalizacja zmiennych numerycznych może być korzystna, szczególnie gdy różne zmienne mają różne skale. Modele takie jak regresja logistyczna mogą być wrażliwe na różnice w skali zmiennych. Normalizacja (np. standaryzacja lub min-max) ułatwi porównywanie wartości.
5. Czy wyizolować z date podgrupy, które będą ważnymi predatorami?
Tak, warto wyizolować z daty podgrupy, takie jak miesiące, dni tygodnia (dow), czy nawet pory roku, które mogą wpływać na jakość powietrza. Mogą one stanowić istotne predyktory, które pomogą w lepszym modelowaniu zjawisk związanych z jakością powietrza.
